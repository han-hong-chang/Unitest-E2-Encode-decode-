package control

import (
	"fmt"
	"testing"
)

func TestE2smRanFunctionDefinitionDecode(t *testing.T) {
	e2sm := &E2sm{}
	s := string

	fmt.Println("==== ASN.1 Codec =====")
	RanFuncDef, err := e2sm.RanFunctionDefinitionDecode(s)

	if err != nil {
		t.Error("Failed to decode RanFunctionDefinition., err = ", err)
	} else {
		fmt.Println("==== Golang Deocode =====")

		fmt.Println(string(RanFuncDef.ranFunction_Name.ranFunction_ShortName.Buf))
		fmt.Println(string(RanFuncDef.ranFunction_Name.ranFunction_E2SM_OID.Buf))
		fmt.Println(string(RanFuncDef.ranFunction_Name.ranFunction_Description.Buf))
		fmt.Println(int64(*RanFuncDef.ranFunction_Name.ranFunction_Instance))
		fmt.Println("")

		for i := 0; i < len(RanFuncDef.ric_EventTriggerStyle_List); i++ {
			fmt.Println(RanFuncDef.ric_EventTriggerStyle_List[i].ric_EventTriggerStyle_Type)
			fmt.Println(string(RanFuncDef.ric_EventTriggerStyle_List[i].ric_EventTriggerStyle_Name.Buf))
			fmt.Println(RanFuncDef.ric_EventTriggerStyle_List[i].ric_EventTriggerFormat_Type)
		}
		fmt.Println("")

		for i := 0; i < len(RanFuncDef.ric_ReportStyle_List); i++ {
			fmt.Println(RanFuncDef.ric_ReportStyle_List[i].ric_ReportStyle_Type)
			fmt.Println(string(RanFuncDef.ric_ReportStyle_List[i].ric_ReportStyle_Name.Buf))
			fmt.Println(RanFuncDef.ric_ReportStyle_List[i].ric_ActionFormat_Type)

			for j := 0; j < len(RanFuncDef.ric_ReportStyle_List[i].measInfo_Action_List); j++ {
				fmt.Print(*RanFuncDef.ric_ReportStyle_List[i].measInfo_Action_List[j].measID, " ")
				fmt.Println(string(RanFuncDef.ric_ReportStyle_List[i].measInfo_Action_List[j].measName.Buf))
			}
			fmt.Println("")
		}
	}

}

func TestE2smEventTriggerDefinitionEncode(t *testing.T) {
	Buffer := make([]byte, 100)
	var Report_Period int64
	Report_Period = 257

	e2sm := &E2sm{}
	NewBuffer, err := e2sm.EventTriggerDefinitionEncode(Buffer, Report_Period)
	if err != nil {
		t.Error("Failed to Encode EventTriggerDefinition, err = ", err)
	} else {
		fmt.Println("==== ASN.1 Encoded Byte =====")
		fmt.Println(fmt.Sprintf("%x", NewBuffer))
	}

}

func TestE2smActionDefinitionFormat1Encode(t *testing.T) {
	ActionDefinitionFmt1 := E2SM_KPM_ActionDefinition_Format1{
		measInfoList: []MeasurementInfoItem{},
		granulPeriod: 1,
		cellGlobalID: &CGI{
			pLMNIdentity: "001F01",
			CellIdentity: "000100100011010001010110000000000001",
			NodebType:    2,
		},
	}
	Buffer := make([]byte, 200)

	for i := 0; i < 10; i++ {
		measName1 := PrintableString{
			Buf:  []byte("RSRP"),
			Size: 4,
		}
		measInfoItem1 := MeasurementInfoItem{
			measType:      measName1,
			labelInfoList: []LabelInfoItem{},
		}
		ActionDefinitionFmt1.measInfoList = append(ActionDefinitionFmt1.measInfoList, measInfoItem1)
	}

	e2sm := &E2sm{}

	NewBuffer, err := e2sm.ActionDefinitionFormat1Encode(Buffer, ActionDefinitionFmt1)
	if err != nil {
		t.Error("Failed to Encode ActionDefinition, err = ", err)
	} else {
		fmt.Println("==== ASN.1 Encoded Byte =====")
		fmt.Println(fmt.Sprintf("%x", NewBuffer))
	}

}

func TestE2smActionDefinitionFormat3Encode(t *testing.T) {
	ActionDefinitionFmt3 := E2SM_KPM_ActionDefinition_Format3{
		measCondList: []MeasurementCondItem{},
		granulPeriod: 1,
		cellGlobalID: &CGI{
			pLMNIdentity: "001F01",
			CellIdentity: "000100100011010001010110000000000001",
			NodebType:    2},
	}

	Buffer := make([]byte, 200)

	for i := 0; i < 10; i++ {
		measName := PrintableString{
			Buf:  []byte("RSRP"),
			Size: 4,
		}
		measCondItem := MeasurementCondItem{
			measType:     measName,
			matchingCond: []MatchingCondItem{},
		}

		ActionDefinitionFmt3.measCondList = append(ActionDefinitionFmt3.measCondList, measCondItem)
	}

	e2sm := &E2sm{}

	NewBuffer, err := e2sm.ActionDefinitionFormat3Encode(Buffer, ActionDefinitionFmt3)
	if err != nil {
		t.Error("Failed to Encode ActionDefinition, err = ", err)
	} else {
		fmt.Println("==== ASN.1 Encoded Byte =====")
		fmt.Println(fmt.Sprintf("%x", NewBuffer))
	}

}

func TestE2smIndicationHeaderDecoding(t *testing.T) {
	Payload := []byte{14, 231, 27, 163, 51, 0, 0, 6, 68, 85, 32, 49, 58, 49, 16, 68, 85, 28, 86, 105, 97, 118, 105, 32, 82, 73, 67, 32, 84, 101, 115, 116}
	e2sm := &E2sm{}

	fmt.Println("Length of payload = ", len(Payload))

	fmt.Println("==== ASN.1 Codec =====")
	IndicationHeader, err := e2sm.IndicationHeaderDecode(Payload)
	if err != nil {
		t.Error("Failed to Decode IndicationHeader, err = ", err)
	} else {
		fmt.Println("==== Golang Deocode =====")
		switch IndicationHeader.indicationHeader_Format.(type) {
		case *E2SM_KPM_IndicationHeader_Format1:
			fmt.Println("colletStartTime = ", IndicationHeader.indicationHeader_Format.(*E2SM_KPM_IndicationHeader_Format1).colletStartTime.Buf)
			fmt.Println("senderName = ", *IndicationHeader.indicationHeader_Format.(*E2SM_KPM_IndicationHeader_Format1).senderName)
			fmt.Println("senderType = ", *IndicationHeader.indicationHeader_Format.(*E2SM_KPM_IndicationHeader_Format1).senderType)
			fmt.Println("vendorName = ", *IndicationHeader.indicationHeader_Format.(*E2SM_KPM_IndicationHeader_Format1).vendorName)
		}
	}

}

func TestE2smIndicationMessageDecoding(t *testing.T) {
	fmt.Println("==== E2SM-KPM Indication Message Format1 =====")
	IndicationMessageFormat1Payload := []byte{4, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
	e2sm := &E2sm{}

	fmt.Println("==== ASN.1 Codec =====")
	IndicationMessage, err := e2sm.IndicationMessageDecode(IndicationMessageFormat1Payload)
	if err != nil {
		t.Error("Failed to Decode IndicationMessage, err = ", err)
	} else {
		fmt.Println("==== Golang Deocode =====")
		switch IndicationMessage.indicationMessage_Formats.(type) {
		case *E2SM_KPM_IndicationMessage_Format1:
			measDataList := IndicationMessage.indicationMessage_Formats.(*E2SM_KPM_IndicationMessage_Format1).measData
			for i := 0; i < len(measDataList); i++ {
				measRecordList := measDataList[i].measRecord
				fmt.Printf("len(measRecordList): %v\n", len(measRecordList))

				for j := 0; j < len(measRecordList); j++ {
					fmt.Printf("measDataList[%d], measRecordList[%d]: %v\n", i, j, measRecordList[j])
				}
			}
		}
	}

}

func TestDecodeRANFunctionDefinitionForVIAVI_RIC_Testv1_5(t *testing.T) {
	e2sm := &E2sm{}
	s := string

	fmt.Println("==== ASN.1 Codec =====")
	RanFuncDef, err := e2sm.RanFunctionDefinitionDecode(s)

	if err != nil {
		t.Error("Failed to decode RanFunctionDefinition, err = ", err)
	} else {
		fmt.Println("==== Golang Deocode =====")

		fmt.Println(string(RanFuncDef.ranFunction_Name.ranFunction_ShortName.Buf))
		fmt.Println(string(RanFuncDef.ranFunction_Name.ranFunction_E2SM_OID.Buf))
		fmt.Println(string(RanFuncDef.ranFunction_Name.ranFunction_Description.Buf))
		fmt.Println(int64(*RanFuncDef.ranFunction_Name.ranFunction_Instance))
		fmt.Println("")

		for i := 0; i < len(RanFuncDef.ric_EventTriggerStyle_List); i++ {
			fmt.Println(RanFuncDef.ric_EventTriggerStyle_List[i].ric_EventTriggerStyle_Type)
			fmt.Println(string(RanFuncDef.ric_EventTriggerStyle_List[i].ric_EventTriggerStyle_Name.Buf))
			fmt.Println(RanFuncDef.ric_EventTriggerStyle_List[i].ric_EventTriggerFormat_Type)
		}
		fmt.Println("")

		for i := 0; i < len(RanFuncDef.ric_ReportStyle_List); i++ {
			fmt.Println(RanFuncDef.ric_ReportStyle_List[i].ric_ReportStyle_Type)
			fmt.Println(string(RanFuncDef.ric_ReportStyle_List[i].ric_ReportStyle_Name.Buf))
			fmt.Println(RanFuncDef.ric_ReportStyle_List[i].ric_ActionFormat_Type)

			for j := 0; j < len(RanFuncDef.ric_ReportStyle_List[i].measInfo_Action_List); j++ {
				//fmt.Print(*RanFuncDef.ric_ReportStyle_List[i].measInfo_Action_List[j].measID, " ")
				if j == len(RanFuncDef.ric_ReportStyle_List[i].measInfo_Action_List)-1 {
					fmt.Print("\"" + string(RanFuncDef.ric_ReportStyle_List[i].measInfo_Action_List[j].measName.Buf) + "\"")
				} else {

					fmt.Print("\"" + string(RanFuncDef.ric_ReportStyle_List[i].measInfo_Action_List[j].measName.Buf) + "\"" + ", ")
				}
			}
			fmt.Println("")
		}
	}

}

func Test_GenerateActionDefinitionFormat1EncodedByteForVIAVI_RIC_Testv1_5(t *testing.T) {
	//Configuration
	PLMNId := "001F01"
	NrCellId := "000100100011010001010110000000000001"

	measLabelList := []string{"NR-CGI", "NR-PCI", "GNB-DU-ID", "DRB.UEThpDl", "DRB.UEThpUl", "QosFlow.PdcpPduVolumeUl", "QosFlow.PdcpPduVolumeDl", "RRC.ConnMean", "RRC.ConnMax", "RRC.InactiveConnMean", "RRC.InactiveConnMax", "RRU.PrbAvailDl",
		"RRU.PrbAvailUl", "RRU.PrbUsedDl", "RRU.PrbUsedUl", "TB.TotNbrDlInitial.Qpsk", "TB.TotNbrDlInitial.16Qam", "TB.TotNbrDlInitial.64Qam", "TB.TotNbrDlInitial.256Qam", "TB.IntialErrNbrDl", "TB.IntialErrNbrDl.Qpsk",
		"TB.IntialErrNbrDl.16Qam", "TB.IntialErrNbrDl.64Qam", "TB.IntialErrNbrDl.256Qam", "TB.TotNbrDl.X", "TB.ErrToltalNbrDl.X", "TB.ResidualErrNbrDl", "TB.TotNbrUlInit", "TB.TotNbrUlInit.Qpsk", "TB.TotNbrUlInit.16Qam",
		"TB.TotNbrUlInit.64Qam", "TB.TotNbrUlInit.256Qam", "TB.ErrNbrUlInitial", "TB.ErrNbrUlInitial.Qpsk", "TB.ErrNbrUlInitial.16Qam", "TB.ErrNbrUlInitial.64Qam", "TB.ErrNbrUlInitial.256Qam",
		"TB.TotNbrUl.X", "TB.ErrToltalNbrUl.X", "TB.ResidualErrNbrUl", "Viavi.Geo.x", "Viavi.Geo.y", "Viavi.Geo.z"}

	ActionDefinitionFmt1 := E2SM_KPM_ActionDefinition_Format1{
		measInfoList: []MeasurementInfoItem{},
		granulPeriod: 1,
		cellGlobalID: &CGI{
			pLMNIdentity: PLMNId,
			CellIdentity: NrCellId,
			NodebType:    2,
		},
	}
	Buffer := make([]byte, 1500)

	for i := 0; i < len(measLabelList); i++ {
		measName := PrintableString{
			Buf:  []byte(measLabelList[i]),
			Size: len(measLabelList[i]),
		}
		measInfoItem := MeasurementInfoItem{
			measType:      measName,
			labelInfoList: []LabelInfoItem{},
		}
		ActionDefinitionFmt1.measInfoList = append(ActionDefinitionFmt1.measInfoList, measInfoItem)
	}

	e2sm := &E2sm{}

	NewBuffer, err := e2sm.ActionDefinitionFormat1Encode(Buffer, ActionDefinitionFmt1)
	if err != nil {
		t.Error("Failed to Encode ActionDefinition, err = ", err)
	} else {
		fmt.Println("==== ASN.1 Encoded Byte =====")
		fmt.Println(fmt.Sprintf("%x", NewBuffer))

		fmt.Println("==== Convert to int64 =====")
		fmt.Println(fmt.Sprintf("%d", ByteSlice2Int64Slice(NewBuffer)))

		fmt.Println("==== Add dot between 2 Numbers =====")
		fmt.Println(AddDotBetween2Number(fmt.Sprintf("%d", ByteSlice2Int64Slice(NewBuffer))))
	}

}

func Test_GenerateActionDefinitionFormat3EncodedByteForVIAVI_RIC_Testv1_5(t *testing.T) {
	//Configuration
	PLMNId := "001F01"
	NrCellId := "000100100011010001010110000000000001"

	measLabelList := []string{"Viavi.UE.id", "Viavi.Cell.id", "Viavi.Slice.id", "DRB.UEThpDl", "DRB.UEThpUl", "RRU.PrbUsedDl", "RRU.PrbUsedUl", "RF.serving.id", "RF.serving.RSRP", "RF.serving.RSRQ",
		"RF.serving.RSSINR", "RF.nb1.id", "RF.nb1.RSRP", "RF.nb1.RSRQ", "RF.nb1.RSSINR", "RF.nb2.id", "RF.nb2.RSRP", "RF.nb2.RSRQ", "RF.nb2.RSSINR", "RF.nb3.id", "RF.nb3.RSRP", "RF.nb3.RSRQ",
		"RF.nb3.RSSINR", "RF.nb4.id", "RF.nb4.RSRP", "RF.nb4.RSRQ", "RF.nb4.RSSINR", "RF.nb5.id", "RF.nb5.RSRP", "RF.nb5.RSRQ", "RF.nb5.RSSINR", "RF.nb6.id", "RF.nb6.RSRP", "RF.nb6.RSRQ",
		"RF.nb6.RSSINR", "RF.nb7.id", "RF.nb7.RSRP", "RF.nb7.RSRQ", "RF.nb7.RSSINR", "TB.TotNbrUlInit", "TB.IntialErrNbrDl", "TB.ResidualErrNbrDl", "TB.ResidualErrNbrUl", "TB.TotNbrDlInitial.Qpsk",
		"TB.TotNbrDlInitial.16Qam", "TB.TotNbrDlInitial.64Qam", "TB.TotNbrDlInitial.256Qam", "TB.IntialErrNbrDl.Qpsk", "TB.IntialErrNbrDl.16Qam", "TB.IntialErrNbrDl.64Qam", "TB.IntialErrNbrDl.256Qam",
		"TB.TotNbrUlInit.Qpsk", "TB.TotNbrUlInit.16Qam", "TB.TotNbrUlInit.64Qam", "TB.TotNbrUlInit.256Qam", "TB.ErrNbrUlInitial", "TB.ErrNbrUlInitial.Qpsk", "TB.ErrNbrUlInitial.16Qam",
		"TB.ErrNbrUlInitial.64Qam", "TB.ErrNbrUlInitial.256Qam", "Viavi.Geo.x", "Viavi.Geo.y", "Viavi.Geo.z"}

	ActionDefinitionFmt3 := E2SM_KPM_ActionDefinition_Format3{
		measCondList: []MeasurementCondItem{},
		granulPeriod: 1,
		cellGlobalID: &CGI{
			pLMNIdentity: PLMNId,
			CellIdentity: NrCellId,
			NodebType:    2,
		},
	}
	Buffer := make([]byte, 1500)

	for i := 0; i < len(measLabelList); i++ {
		measName := PrintableString{
			Buf:  []byte(measLabelList[i]),
			Size: len(measLabelList[i]),
		}
		measCondItem := MeasurementCondItem{
			measType:     measName,
			matchingCond: []MatchingCondItem{},
		}

		ActionDefinitionFmt3.measCondList = append(ActionDefinitionFmt3.measCondList, measCondItem)
	}

	e2sm := &E2sm{}

	NewBuffer, err := e2sm.ActionDefinitionFormat3Encode(Buffer, ActionDefinitionFmt3)
	if err != nil {
		t.Error("Failed to Encode ActionDefinition, err = ", err)
	} else {
		fmt.Println("==== ASN.1 Encoded Byte =====")
		fmt.Println(fmt.Sprintf("%x", NewBuffer))

		fmt.Println("==== Convert to int64 =====")
		fmt.Println(fmt.Sprintf("%d", ByteSlice2Int64Slice(NewBuffer)))

		fmt.Println("==== Add dot between 2 Numbers =====")
		fmt.Println(AddDotBetween2Number(fmt.Sprintf("%d", ByteSlice2Int64Slice(NewBuffer))))
	}

}

func Test_GenerateActionDefinitionFormat1EncodedByteForVIAVI_RIC_Testv1_5_ScenarioGenerator(t *testing.T) {
	//Configuration
	PLMNId := "001F01"
	NrCellId := "000100100011010001010110000000000001"

	measLabelList := []string{"DRB.UEThpDl", "DRB.UEThpUl", "PEE.AvgPower", "PEE.Energy", "QosFlow.TotPdcpPduVolumeDl",
		"QosFlow.TotPdcpPduVolumeUl", "RRC.ConnMax", "RRC.ConnMean", "RRU.PrbAvailDl", "RRU.PrbAvailUl", "RRU.PrbTotDl",
		"RRU.PrbTotUl", "RRU.PrbUsedDl", "RRU.PrbUsedUl", "Viavi.Geo.x", "Viavi.Geo.y", "Viavi.Geo.z", "Viavi.GnbDuId",
		"Viavi.NrCgi", "Viavi.NrPci", "Viavi.Radio.antennaType", "Viavi.Radio.azimuth", "Viavi.Radio.power"}

	ActionDefinitionFmt1 := E2SM_KPM_ActionDefinition_Format1{
		measInfoList: []MeasurementInfoItem{},
		granulPeriod: 1,
		cellGlobalID: &CGI{
			pLMNIdentity: PLMNId,
			CellIdentity: NrCellId,
			NodebType:    2,
		},
	}
	Buffer := make([]byte, 1500)

	for i := 0; i < len(measLabelList); i++ {
		measName := PrintableString{
			Buf:  []byte(measLabelList[i]),
			Size: len(measLabelList[i]),
		}
		measInfoItem := MeasurementInfoItem{
			measType:      measName,
			labelInfoList: []LabelInfoItem{},
		}
		ActionDefinitionFmt1.measInfoList = append(ActionDefinitionFmt1.measInfoList, measInfoItem)
	}

	e2sm := &E2sm{}

	NewBuffer, err := e2sm.ActionDefinitionFormat1Encode(Buffer, ActionDefinitionFmt1)
	if err != nil {
		t.Error("Failed to Encode ActionDefinition, err = ", err)
	} else {
		fmt.Println("==== ASN.1 Encoded Byte =====")
		fmt.Println(fmt.Sprintf("%x", NewBuffer))

		fmt.Println("==== Convert to int64 =====")
		fmt.Println(fmt.Sprintf("%d", ByteSlice2Int64Slice(NewBuffer)))

		fmt.Println("==== Add dot between 2 Numbers =====")
		fmt.Println(AddDotBetween2Number(fmt.Sprintf("%d", ByteSlice2Int64Slice(NewBuffer))))
	}

}

func Test_GenerateActionDefinitionFormat3EncodedByteForVIAVI_RIC_Testv1_5_ScenarioGenerator(t *testing.T) {
	//Configuration
	PLMNId := "001F01"
	NrCellId := "000100100011010001010110000000000001"

	measLabelList := []string{"DRB.UECqiDl", "DRB.UECqiDl.PCC", "DRB.UECqiDl.SCC", "DRB.UECqiUl", "DRB.UECqiUl.PCC", "DRB.UECqiUl.SCC", "DRB.UEThpDl",
		"DRB.UEThpDl.PCC", "DRB.UEThpDl.SCC", "DRB.UEThpUl", "DRB.UEThpUl.PCC", "DRB.UEThpUl.SCC", "QosFlow.TotPdcpPduVolumeDl",
		"RRU.PrbUsedDl", "RRU.PrbUsedDl.PCC", "RRU.PrbUsedDl.SCC", "RRU.PrbUsedUl", "RRU.PrbUsedUl.PCC", "RRU.PrbUsedUl.SCC",
		"TB.TotNbrDl", "TB.TotNbrDl.PCC", "TB.TotNbrDl.SCC", "TB.TotNbrUl", "TB.TotNbrUl.PCC", "TB.TotNbrUl.SCC",
		"Viavi.Cell.id", "Viavi.Geo.x", "Viavi.Geo.y", "Viavi.Geo.z", "Viavi.Nb1.RsSinr", "Viavi.Nb1.Rsrp", "Viavi.Nb1.Rsrq",
		"Viavi.Nb1.id", "Viavi.Nb2.RsSinr", "Viavi.Nb2.Rsrp", "Viavi.Nb2.Rsrq", "Viavi.Nb2.id", "Viavi.QoS.5qi",
		"Viavi.QoS.CarrierGfbr.PCC", "Viavi.QoS.CarrierGfbr.SCC", "Viavi.QoS.CarrierTput.PCC", "Viavi.QoS.CarrierTput.SCC",
		"Viavi.QoS.CellId", "Viavi.QoS.DrbId", "Viavi.QoS.Gfbr", "Viavi.QoS.Mfbr", "Viavi.QoS.Priority", "Viavi.QoS.SecCellId",
		"Viavi.QoS.SliceId", "Viavi.QoS.TargetTput", "Viavi.QoS.UeRnti", "Viavi.Slice.id", "Viavi.UE.BeamId", "Viavi.UE.BeamId.PCC",
		"Viavi.UE.BeamId.SCC", "Viavi.UE.FrameCnt", "Viavi.UE.FrameCnt.PCC", "Viavi.UE.FrameCnt.SCC",
		"Viavi.UE.RsSinr", "Viavi.UE.RsSinr.PCC", "Viavi.UE.RsSinr.SCC", "Viavi.UE.Rsrp", "Viavi.UE.Rsrp.PCC", "Viavi.UE.Rsrp.SCC",
		"Viavi.UE.Rsrq", "Viavi.UE.Rsrq.PCC", "Viavi.UE.Rsrq.SCC", "Viavi.UE.anomalies", "Viavi.UE.id", "Viavi.UE.servingDistance",
		"Viavi.UE.speed", "Viavi.UE.targetThroughputDl", "Viavi.UE.targetThroughputUl"}

	ActionDefinitionFmt3 := E2SM_KPM_ActionDefinition_Format3{
		measCondList: []MeasurementCondItem{},
		granulPeriod: 1,
		cellGlobalID: &CGI{
			pLMNIdentity: PLMNId,
			CellIdentity: NrCellId,
			NodebType:    2,
		},
	}
	Buffer := make([]byte, 3000)

	for i := 0; i < len(measLabelList); i++ {
		measName := PrintableString{
			Buf:  []byte(measLabelList[i]),
			Size: len(measLabelList[i]),
		}
		measCondItem := MeasurementCondItem{
			measType:     measName,
			matchingCond: []MatchingCondItem{},
		}

		ActionDefinitionFmt3.measCondList = append(ActionDefinitionFmt3.measCondList, measCondItem)
	}

	e2sm := &E2sm{}

	NewBuffer, err := e2sm.ActionDefinitionFormat3Encode(Buffer, ActionDefinitionFmt3)
	if err != nil {
		t.Error("Failed to Encode ActionDefinition, err = ", err)
	} else {
		fmt.Println("==== ASN.1 Encoded Byte =====")
		fmt.Println(fmt.Sprintf("%x", NewBuffer))

		fmt.Println("==== Convert to int64 =====")
		fmt.Println(fmt.Sprintf("%d", ByteSlice2Int64Slice(NewBuffer)))

		fmt.Println("==== Add dot between 2 Numbers =====")
		fmt.Println(AddDotBetween2Number(fmt.Sprintf("%d", ByteSlice2Int64Slice(NewBuffer))))
	}

}
